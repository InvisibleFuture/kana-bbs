export default class {
  // 角色信息缓存加载器, 可以主动更新?
  // 后端本可以实现基于缓存的优化
  // 如果通过前端实现, 则前端主动查询并缓存每个用户信息摘要
  // 每读取到用户信息时,, 仅通过 uid 调用实现组件, 而组件信息来源是独立的
  // 可能会造成用户信息显示延迟,, 和反复调用的情况..?
  // 如果不从服务器即开始载入用户信息, SSR 如何处理?
  // 实际在数据传输过程会压缩用户信息, 因而占用不大(虽然压缩过程效率低下)
  constructor() {
    this.list = new Map() // 储存所有仍用到的用户信息
  }
  set(id, user) {
    this.list.set(id, user)
  }
  // 使用某个用户信息时是立即返回结果的,, 这与 SSR 冲突
  // 只适合聊天室使用, 防止大量分发重复数据

  // 在 asyncData 中调用 server db 方法获取 data
  // 在 asyncData 中判断是否 浏览器环境, 调用 data
}
